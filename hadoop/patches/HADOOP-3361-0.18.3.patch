diff --git lib/jets3t-0.6.0.jar lib/jets3t-0.6.0.jar
deleted file mode 100644
index 7fa014c..0000000
Binary files lib/jets3t-0.6.0.jar and /dev/null differ
diff --git lib/jets3t-0.6.1.jar lib/jets3t-0.6.1.jar
new file mode 100644
index 0000000..e4048dd
Binary files /dev/null and lib/jets3t-0.6.1.jar differ
diff --git src/core/org/apache/hadoop/fs/s3native/Jets3tNativeFileSystemStore.java src/core/org/apache/hadoop/fs/s3native/Jets3tNativeFileSystemStore.java
index 8c0ba3b..9fee452 100644
--- src/core/org/apache/hadoop/fs/s3native/Jets3tNativeFileSystemStore.java
+++ src/core/org/apache/hadoop/fs/s3native/Jets3tNativeFileSystemStore.java
@@ -18,6 +18,8 @@
 
 package org.apache.hadoop.fs.s3native;
 
+import static org.apache.hadoop.fs.s3native.NativeS3FileSystem.PATH_DELIMITER;
+
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -171,17 +173,27 @@ class Jets3tNativeFileSystemStore implements NativeFileSystemStore {
     throws IOException {
     return list(prefix, maxListingLength, null);
   }
-
+  
   public PartialListing list(String prefix, int maxListingLength,
       String priorLastKey) throws IOException {
+
+    return list(prefix, PATH_DELIMITER, maxListingLength, priorLastKey);
+  }
+
+  public PartialListing listAll(String prefix, int maxListingLength,
+      String priorLastKey) throws IOException {
+
+    return list(prefix, null, maxListingLength, priorLastKey);
+  }
+
+  private PartialListing list(String prefix, String delimiter,
+      int maxListingLength, String priorLastKey) throws IOException {
     try {
-      if (prefix.length() > 0 &&
-          !prefix.endsWith(NativeS3FileSystem.PATH_DELIMITER)) {
-        prefix += NativeS3FileSystem.PATH_DELIMITER;
+      if (prefix.length() > 0 && !prefix.endsWith(PATH_DELIMITER)) {
+        prefix += PATH_DELIMITER;
       }
       S3ObjectsChunk chunk = s3Service.listObjectsChunked(bucket.getName(),
-          prefix, NativeS3FileSystem.PATH_DELIMITER, maxListingLength,
-          priorLastKey);
+          prefix, delimiter, maxListingLength, priorLastKey);
       
       FileMetadata[] fileMetadata =
         new FileMetadata[chunk.getObjects().length];
@@ -210,6 +222,18 @@ class Jets3tNativeFileSystemStore implements NativeFileSystemStore {
       throw new S3Exception(e);
     }
   }
+  
+  public void rename(String srcKey, String dstKey) throws IOException {
+    try {
+      s3Service.moveObject(bucket.getName(), srcKey, bucket.getName(),
+          new S3Object(dstKey), false);
+    } catch (S3ServiceException e) {
+      if (e.getCause() instanceof IOException) {
+        throw (IOException) e.getCause();
+      }
+      throw new S3Exception(e);
+    }
+  }
 
   public void purge(String prefix) throws IOException {
     try {
diff --git src/core/org/apache/hadoop/fs/s3native/NativeFileSystemStore.java src/core/org/apache/hadoop/fs/s3native/NativeFileSystemStore.java
index bd16db6..eb0a682 100644
--- src/core/org/apache/hadoop/fs/s3native/NativeFileSystemStore.java
+++ src/core/org/apache/hadoop/fs/s3native/NativeFileSystemStore.java
@@ -44,8 +44,12 @@ interface NativeFileSystemStore {
   PartialListing list(String prefix, int maxListingLength) throws IOException;
   PartialListing list(String prefix, int maxListingLength, String priorLastKey)
     throws IOException;
+  PartialListing listAll(String prefix, int maxListingLength,
+      String priorLastKey) throws IOException;
   
   void delete(String key) throws IOException;
+
+  void rename(String srcKey, String dstKey) throws IOException;
   
   /**
    * Delete all keys with the given prefix. Used for testing.
diff --git src/core/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java src/core/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java
index 698a0c3..3f2566f 100644
--- src/core/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java
+++ src/core/org/apache/hadoop/fs/s3native/NativeS3FileSystem.java
@@ -451,12 +451,116 @@ public class NativeS3FileSystem extends FileSystem {
     return new FSDataInputStream(new BufferedFSInputStream(
         new NativeS3FsInputStream(store.retrieve(key), key), bufferSize));
   }
+  
+  // rename() and delete() use this method to ensure that the parent directory
+  // of the source does not vanish.
+  private void createParent(Path path) throws IOException {
+      Path parent = path.getParent();
+      if (parent != null) {
+          String key = pathToKey(makeAbsolute(parent));
+          if (key.length() > 0) {
+              store.storeEmptyFile(key + FOLDER_SUFFIX);
+          }
+      }
+  }
+  
+  private boolean existsAndIsFile(Path f) throws IOException {
+    
+    Path absolutePath = makeAbsolute(f);
+    String key = pathToKey(absolutePath);
+    
+    if (key.length() == 0) {
+        return false;
+    }
+    
+    FileMetadata meta = store.retrieveMetadata(key);
+    if (meta != null) {
+        // S3 object with given key exists, so this is a file
+        return true;
+    }
+    
+    if (store.retrieveMetadata(key + FOLDER_SUFFIX) != null) {
+        // Signifies empty directory
+        return false;
+    }
+    
+    PartialListing listing = store.list(key, 1, null);
+    if (listing.getFiles().length > 0 ||
+        listing.getCommonPrefixes().length > 0) {
+        // Non-empty directory
+        return false;
+    }
+    
+    throw new FileNotFoundException(absolutePath +
+        ": No such file or directory");
+}
+
 
   @Override
   public boolean rename(Path src, Path dst) throws IOException {
-    throw new IOException("Not supported");
+
+    String srcKey = pathToKey(makeAbsolute(src));
+
+    if (srcKey.length() == 0) {
+      // Cannot rename root of file system
+      return false;
+    }
+
+    // Figure out the final destination
+    String dstKey;
+    try {
+      boolean dstIsFile = existsAndIsFile(dst);
+      if (dstIsFile) {
+        // Attempting to overwrite a file using rename()
+        return false;
+      } else {
+        // Move to within the existent directory
+        dstKey = pathToKey(makeAbsolute(new Path(dst, src.getName())));
+      }
+    } catch (FileNotFoundException e) {
+      // dst doesn't exist, so we can proceed
+      dstKey = pathToKey(makeAbsolute(dst));
+      try {
+        if (!getFileStatus(dst.getParent()).isDir()) {
+          return false; // parent dst is a file
+        }
+      } catch (FileNotFoundException ex) {
+        return false; // parent dst does not exist
+      }
+    }
+
+    try {
+      boolean srcIsFile = existsAndIsFile(src);
+      if (srcIsFile) {
+        store.rename(srcKey, dstKey);
+      } else {
+        // Move the folder object
+        store.delete(srcKey + FOLDER_SUFFIX);
+        store.storeEmptyFile(dstKey + FOLDER_SUFFIX);
+
+        // Move everything inside the folder
+        String priorLastKey = null;
+        do {
+          PartialListing listing = store.listAll(srcKey, S3_MAX_LISTING_LENGTH,
+              priorLastKey);
+          for (FileMetadata file : listing.getFiles()) {
+            store.rename(file.getKey(), dstKey
+                + file.getKey().substring(srcKey.length()));
+          }
+          priorLastKey = listing.getPriorLastKey();
+        } while (priorLastKey != null);
+      }
+
+      createParent(src);
+      return true;
+
+    } catch (FileNotFoundException e) {
+      // Source file does not exist;
+      return false;
+    }
   }
 
+
   /**
    * Set the working directory to the given directory.
    */
diff --git src/test/org/apache/hadoop/fs/s3native/InMemoryNativeFileSystemStore.java src/test/org/apache/hadoop/fs/s3native/InMemoryNativeFileSystemStore.java
index 8781125..d3086da 100644
--- src/test/org/apache/hadoop/fs/s3native/InMemoryNativeFileSystemStore.java
+++ src/test/org/apache/hadoop/fs/s3native/InMemoryNativeFileSystemStore.java
@@ -18,6 +18,7 @@
 
 package org.apache.hadoop.fs.s3native;
 
+import static org.apache.hadoop.fs.s3native.NativeS3FileSystem.PATH_DELIMITER;
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.ByteArrayOutputStream;
@@ -127,22 +128,36 @@ class InMemoryNativeFileSystemStore implements NativeFileSystemStore {
   public PartialListing list(String prefix, int maxListingLength,
       String priorLastKey) throws IOException {
 
-    if (prefix.length() > 0 &&
-        !prefix.endsWith(NativeS3FileSystem.PATH_DELIMITER)) {
-      prefix += NativeS3FileSystem.PATH_DELIMITER;
+    return list(prefix, PATH_DELIMITER, maxListingLength, priorLastKey);
+  }
+
+  public PartialListing listAll(String prefix, int maxListingLength,
+      String priorLastKey) throws IOException {
+
+    return list(prefix, null, maxListingLength, priorLastKey);
+  }
+
+  private PartialListing list(String prefix, String delimiter,
+      int maxListingLength, String priorLastKey) throws IOException {
+
+    if (prefix.length() > 0 && !prefix.endsWith(PATH_DELIMITER)) {
+      prefix += PATH_DELIMITER;
     }
     
     List<FileMetadata> metadata = new ArrayList<FileMetadata>();
     SortedSet<String> commonPrefixes = new TreeSet<String>();
     for (String key : dataMap.keySet()) {
       if (key.startsWith(prefix)) {
-        int delimIndex = key.indexOf(NativeS3FileSystem.PATH_DELIMITER,
-            prefix.length());
-        if (delimIndex == -1) {
+        if (delimiter == null) {
           metadata.add(retrieveMetadata(key));
         } else {
-          String commonPrefix = key.substring(0, delimIndex);
-          commonPrefixes.add(commonPrefix);
+          int delimIndex = key.indexOf(delimiter, prefix.length());
+          if (delimIndex == -1) {
+            metadata.add(retrieveMetadata(key));
+          } else {
+            String commonPrefix = key.substring(0, delimIndex);
+            commonPrefixes.add(commonPrefix);
+          }
         }
       }
       if (metadata.size() + commonPrefixes.size() == maxListingLength) {
@@ -159,6 +174,11 @@ class InMemoryNativeFileSystemStore implements NativeFileSystemStore {
     dataMap.remove(key);
   }
 
+  public void rename(String srcKey, String dstKey) throws IOException {
+    metadataMap.put(dstKey, metadataMap.remove(srcKey));
+    dataMap.put(dstKey, dataMap.remove(srcKey));
+  }
+  
   public void purge(String prefix) throws IOException {
     Iterator<Entry<String, FileMetadata>> i =
       metadataMap.entrySet().iterator();
diff --git src/test/org/apache/hadoop/fs/s3native/NativeS3FileSystemContractBaseTest.java src/test/org/apache/hadoop/fs/s3native/NativeS3FileSystemContractBaseTest.java
index fb867fa..bf2e3c3 100644
--- src/test/org/apache/hadoop/fs/s3native/NativeS3FileSystemContractBaseTest.java
+++ src/test/org/apache/hadoop/fs/s3native/NativeS3FileSystemContractBaseTest.java
@@ -47,11 +47,6 @@ public abstract class NativeS3FileSystemContractBaseTest
     super.tearDown();
   }
   
-  @Override
-  protected boolean renameSupported() {
-    return false;
-  }
-  
   public void testListStatusForRoot() throws Exception {
     Path testDir = path("/test");
     assertTrue(fs.mkdirs(testDir));
