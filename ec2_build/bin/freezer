#!/usr/bin/env python
# Copyright (c) 2009 Cloudera, inc.

import sys
import os
import boto
from optparse import OptionParser


S3 = boto.connect_s3()

BINARY_MAINDIR = "build/"
SOURCE_MAINDIR = "file-cache/"
DEFAULT_BUILD_BUCKET = 'ec2-build'
DEFAULT_FREEZER_BUCKET = 'cloudera-freezer'

def if_verbose_print(input_string):
  """ Only print if we are not quiet """
  if not QUIET:
    print(input_string)


def rename_key(src, dst, freezer_bucket, dry_run):
  """ Moves all the files from src to destination """
  if dry_run:
    if_verbose_print("Pretending to move")
  source_keys = [ key for key in freezer_bucket.list(prefix=src)]
  for source_key in source_keys:
    src_file = source_key.name
    dst_file = source_key.name
    dst_file = dst_file.replace(src, dst)
    source_key.name = source_key.name.replace('+','%2B')

    if_verbose_print("Copying from: %s to: %s" % (src_file, dst_file))
    if not dry_run:
      source_key.copy(freezer_bucket, dst_file)

  source_keys = [ key for key in freezer_bucket.list(prefix=src)]
  for source_key in source_keys:
    src_file = source_key.name
    source_key.name = source_key.name.replace('+','%2B')
    if_verbose_print("Deleting: %s" % (src_file))
    if not dry_run:
      source_key.delete()


def move_to_freezer(ec2_build_source,
		build_bucket,
		freezer_bucket,
		freezer_destination,
		dry_run):
  """ Moves all the files from ec2_build_source to freezer_destination.
 Including files referenced in manifests"""

  if not ec2_build_source.endswith('/'):
    ec2_build_source = ec2_build_source + '/'

  if not freezer_destination.endswith('/'):
    freezer_destination = freezer_destination + '/'

  key_sw = BINARY_MAINDIR + ec2_build_source
  rs = build_bucket.list(prefix=key_sw)

  binary_freezer_destination = freezer_destination + 'binary/'
  source_freezer_destination = freezer_destination + 'source/'

  for key in rs:

    binary_destination_path = key.name.replace(key_sw, binary_freezer_destination)
    if_verbose_print("Copying file [%s] to [%s]" % (key.name, binary_destination_path))
    if not dry_run:
      key.copy(freezer_bucket, binary_destination_path)

    # Go through manifests and copy referenced files as well
    if key.name.endswith('manifest.txt'):
      for line in key.get_contents_as_string().split('\n'):
        type_, src, hash_, url = line.strip().split('\t')

        artifact_destination_patch = source_freezer_destination + src
        if_verbose_print("Copying artifact [%s] | hash: [%s] to [%s]" % (src, hash_, artifact_destination_patch))

        if not dry_run:
          source_artifact = build_bucket.get_key(SOURCE_MAINDIR + hash_)
          source_artifact.copy(freezer_bucket, artifact_destination_patch)


def download_from_freezer(freezer_bucket, freezer_location, local_path):

  if not freezer_location.endswith('/'):
    freezer_location = freezer_location + '/'

  for freezer_file in freezer_bucket.list(prefix=freezer_location):

    directory_name = os.path.join(local_path, os.path.dirname(freezer_file.name))

    if not os.path.exists(directory_name):
      if_verbose_print("Making directory: %s" % directory_name)
      os.makedirs(directory_name)

    filename = os.path.join(local_path, freezer_file.name)
    if_verbose_print("Fetching File: %s" % filename)
    freezer_file.get_contents_to_filename(filename)


def main(args):
  usage = "usage: %prog [options] ec2_build_source freezer_destination"
  op = OptionParser(usage=usage)

  op.add_option('-d', '--dry-run', action="store_true", default=False,
      help="Dont do anything just pretend")

  op.add_option('-l', '--local-path', default=None,
      help="Specify a local path to mirror build artifacts")

  op.add_option('-r', '--rename', action="store_true", default=False,
    help="All we do in this mode is rename a build from the source to the destination. The required arguments change to the source and destination of the move")

  op.add_option('-q', '--quiet', action="store_true", default=False,
      help="Don't actually print anything")

  op.add_option('-b', '--build-bucket',
      default=DEFAULT_BUILD_BUCKET,
      help="The build bucket to pull artifacts from")

  op.add_option('-f', '--freezer-bucket',
      default=DEFAULT_FREEZER_BUCKET,
      help="The freezer bucket to push artifacts to")

  (options, args) = op.parse_args()
  global QUIET
  QUIET = options.quiet

  build_bucket = S3.lookup(options.build_bucket)

  freezer_bucket = S3.lookup(options.freezer_bucket)

  if not build_bucket:
    error_string = """Unable to lookup bucket %s did you set your AWS_SECRET_ACCESS_KEY correctly""" % options.build_bucket
    raise Exception(error_string)

  if not freezer_bucket:
    error_string = """Unable to lookup bucket %s did you set your AWS_SECRET_ACCESS_KEY correctly""" % options.freezer_bucket
    raise Exception(error_string)

  if len(args) != 2:
    op.error("I need more arguments")

  ec2_build_source = args[0]
  freezer_destination = args[1]

  if options.rename:
    rename_key(ec2_build_source,
		    freezer_destination,
		    freezer_bucket,
		    options.dry_run)
  else:
    if_verbose_print("Moving build to freezer:")
    if_verbose_print("========================")
    move_to_freezer(ec2_build_source, build_bucket, freezer_bucket, freezer_destination, options.dry_run)

    if options.local_path:
      if_verbose_print('-' * 80)
      if_verbose_print("Downloading frozen build:")
      if_verbose_print("=========================")
      download_from_freezer(freezer_bucket, freezer_destination, options.local_path)

if __name__ == "__main__":
  main(sys.argv)
