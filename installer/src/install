#!/usr/bin/env python
#
# (c) Copyright 2008 Cloudera, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# Installation tool for Cloudera Hadoop Distribution
# main entry point
#
# Usage: install [options]
# Type "install --help" for full usage instructions
#
#

import logging
import os
import sys

import com.cloudera.distribution.arch as arch
from   com.cloudera.distribution.constants import *
import com.cloudera.distribution.env as env
from   com.cloudera.distribution.installerror import InstallError
import com.cloudera.distribution.installproperties as installproperties
import com.cloudera.distribution.manifest as manifest
import com.cloudera.distribution.remotemgr as remotemgr
import com.cloudera.distribution.toolinstall as toolinstall
import com.cloudera.util.output as output

# do this before doing anything else.
output.initLogging()

# use all args except program name
argv = sys.argv[1:]

# set up configuration, init stdout/stderr
properties = installproperties.InstallProperties()
output.attachOutputArgParser(properties)

installproperties.loadAllProperties(properties, argv)

# if the user has not selected a log file name, and a log level, force
# a log file in here; also, set the default log level to verbose.
setLogName = properties.getProperty(output.LOG_FILENAME_PROP)
if setLogName == None:
  properties.setProperty(output.LOG_FILENAME_PROP, DEFAULT_LOG_FILENAME)

setLogVerbosity = properties.getProperty(output.LOG_VERBOSITY_PROP)
if setLogVerbosity == None:
  properties.setProperty(output.LOG_VERBOSITY_PROP, DEFAULT_LOG_VERBOSITY)


# set up the console. Also starts logging to the specified file
output.setupConsole(properties)

# if we are here, then properties and argv parsing succeeded

# Where are we? Switch into installer's base dir
binName = sys.argv[0]
binDir = properties.getProperty(INSTALL_BINDIR_KEY, os.path.dirname(binName))
os.chdir(binDir)

# determine what architecture / platform we're running on.
archDetector = arch.getArchDetector()
archDetector.scan()
if archDetector.getPlatform() == arch.PLATFORM_UNKNOWN:
  output.printlnInfo("Warning: Could not determine linux platform")
  output.printlnInfo("This hampers my ability to determine if you "
      + "have the correct prerequisite")
  output.printlnInfo("packages installed.")

if archDetector.getArch() == arch.ARCH_UNKNOWN:
  # if we can't figure out the arch, then we disable allowing native
  # compression, because we don't want to enable in-Java compression by default
  # by mistake.
  output.printlnInfo("Warning: Could not determine system architecture")
  output.printlnInfo("This hampers my ability to install the correct libraries")
  output.printlnInfo("Disabling native compression libraries in MapReduce")
  properties.setProperty(ALLOW_NATIVE_COMPRESSION_KEY, False)

globalPrereqInstaller = None

try:
  # Assemble installation plan from command line flags
  output.printlnDebug("Creating installation plan...")
  installPlan = manifest.createInstallPlan(properties)
  globalPrereqInstaller = toolinstall.getToolByName("GlobalPrereq")

  # Detect any prereqs that we cannot install:
  output.printlnInfo("Checking prerequisites for installation...")
  for tool in installPlan.getInstallItems():
    output.printlnVerbose("Running precheck for item: " + tool.getName())
    tool.precheck()

  output.printlnInfo("All necessary prerequisites were found.")

  output.printlnInfo("""
To set up Hadoop, we need to ask you a few basic questions about your
cluster. When possible, acceptable defaults are provided to you, which you
can select by pressing [enter].
""")

  for tool in installPlan.getInstallItems():
    output.printlnVerbose("Running configure for item: " + tool.getName())
    tool.configure()

  # Any user input should have occurred above this line. From this point
  # forward, we only bail out because an underlying installation item
  # chokes -- this is out of the user's hands by here.

  # execute installation plan
  for tool in installPlan.getInstallItems():
    output.printlnInfo("Installing " + tool.getName())
    tool.install()

  # If we're the master, perform automated deployment to additional machines
  if globalPrereqInstaller.isMaster():
    # TODO(aaron): Unattended install  should only do this if DEPLOY_SLAVES_KEY
    # is true; interactive installation should prompt for whether/not to do this
    output.printlnInfo("Deploying distribution to remote hosts.")
    output.printlnInfo("(This may take a few minutes)")
    remote_failed_hosts = remotemgr.deployRemotes(properties)
  else:
    remote_failed_hosts = []

  # any steps to be performed per-tool after the whole system is together
  for tool in installPlan.getInstallItems():
    output.printlnInfo("Performing postinstall for " + tool.getName())
    tool.postInstall()

  # Perform any verification steps that this all installed OK
  for tool in installPlan.getInstallItems():
    output.printlnInfo("Verifying installation of " + tool.getName())
    tool.verify()

except InstallError, ie:
  output.printlnError("An error occurred during the installation process:")
  output.printlnError(str(ie))
  output.printlnError("Installation has been aborted")
  sys.exit(1)

if len(remote_failed_hosts) == 0:
  # all good
  output.printlnInfo("""

***********************************************************************
The Cloudera Hadoop Distribution installation process is complete!
***********************************************************************

""")
else:
  output.printlnInfo("""

***********************************************************************
The Cloudera Hadoop Distribution installation process has completed
locally. Errors were encountered when deploying to remote hosts.
***********************************************************************

""")

globalPrereqName = None
if globalPrereqInstaller != None:
  output.printlnInfo("Distribution installed to %(installdir)s." % \
      { "installdir" : globalPrereqInstaller.getInstallPrefix() })
  output.printlnInfo("Distribution config files are in %(confdir)s." % \
      { "confdir" : globalPrereqInstaller.getConfigDir() } )
  globalPrereqName = globalPrereqInstaller.getName()

output.printlnInfo("")

output.printlnVerbose("Installed components:")
for tool in installPlan.getInstallItems():
  if tool.getName() != globalPrereqName:
    output.printlnVerbose("  " + tool.getName())

hadoopInstaller = toolinstall.getToolByName("Hadoop")
if hadoopInstaller != None:
  hadoopStartCmd = os.path.join(hadoopInstaller.getHadoopBinDir(), \
      "start-all.sh")
  hadoopStopCmd = os.path.join(hadoopInstaller.getHadoopBinDir(), \
      "stop-all.sh")
  output.printlnInfo("You can start Hadoop by running:\n$ %(hadoopStart)s" % \
      { "hadoopStart" : hadoopStartCmd })
  if hadoopInstaller.isHadoopVerified():
    output.printlnInfo("(Note: Hadoop has already been started for you.)")
  output.printlnInfo("You can stop Hadoop by running:\n$ %(hadoopStop)s" % \
      { "hadoopStop" : hadoopStopCmd })
  output.printlnInfo("")


# If there were warnings or more user-run steps, list the follow-up
# actions that must be taken.

if len(remote_failed_hosts) > 0:
  output.printlnInfo("There were errors deploying the distribution to the " \
    + "following remote hosts:")
  for host in remote_failed_hosts:
    output.printlnInfo("  " + host)
  output.printlnInfo("You may need to manually install on these hosts.")

for tool in installPlan.getInstallItems():
  tool.printFinalInstructions()

# echo out information about the user's environment.
env.writeEnvironmentScript()

sys.exit(0)

